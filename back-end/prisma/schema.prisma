// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id                Int                @id                @default(autoincrement())
  firstName         String?
  lastName          String?
  phone             String?
  email             String             @unique
  password          String
  birthDate         String?
  address           String?
  isAdmin           Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  booking           booking[]
  feedback          feedback[]
  license           license[]
  messageSend       message[]          @relation("SentMessages")
  messageReceive    message[]          @relation("ReceivedMessages")
  location          location[]
}

model license {
  id                Int                @id                @default(autoincrement())
  userId            Int
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  user              user             @relation(fields: [userId], references: [id])
  images            image[]
}

model car {
  id                Int                @id                @default(autoincrement())
  make              String
  model             String
  year              Int
  color             String?
  transmission      String?            @default("automatic")
  fuelType          String?
  seatCount         Int?
  doorCount         Int?
  otherDetails      String?
  features          String?
  securityDeposit   Float?
  dailyPrice        Float
  withDriverDailyPrice  Float?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  booking           booking[]
  images            image[]
}

model image {
  id                Int                @id                @default(autoincrement())
  carId             Int?               @unique
  licenseId         Int?
  base64            String
  type              String?
  createdAt         DateTime           @default(now())

  car               car?               @relation(fields: [carId], references: [id])
  license           license?           @relation(fields: [licenseId], references: [id])
}

model booking {
  id                Int                @id                @default(autoincrement())
  userId            Int
  carId             Int
  dateStart         DateTime
  dateReturn        DateTime
  pickupLocation    String?
  destination       String?
  daysBooked        Int?
  withDriver        Boolean
  totalPrice        Float?
  status            BookingStatus      @default(pending)
  note              String?
  paymentOption     PaymentType
  cancelRemarks     String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  user              user             @relation(fields: [userId], references: [id])
  car               car                @relation(fields: [carId], references: [id])
}

enum PaymentType {
  cash
  online
}

model feedback {
  id                Int                @id                @default(autoincrement())
  userId            Int
  stars             Int
  title             String?
  comment           String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  user              user               @relation(fields: [userId], references: [id])
}

model message {
  id                Int                @id                @default(autoincrement())
  from              Int?
  to                Int?
  message           String
  attachment        Json?
  readAt            DateTime?
  createdAt         DateTime           @default(now())

  sender            user?              @relation("SentMessages", fields: [from], references: [id])
  receiver          user?              @relation("ReceivedMessages", fields: [to], references: [id])
}

enum BookingStatus {
  pending
  confirmed
  partially_paid
  paid
  completed
  cancelled
}

model location {
  id                Int                @id                @default(autoincrement())
  lng               Decimal
  lat               Decimal
  userId            Int
  createdAt         DateTime           @default(now())
  updatedat         DateTime?          @updatedAt

  user              user               @relation(fields: [userId], references: [id])
}